platform :osx, '14'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!

  # Main app pods
  pod 'Punycode', :podspec => '../../macos/Podspecs'
  pod 'FilterEngine', :podspec => '../../macos/Podspecs'
  pod 'PublicSuffixList', :podspec => '../../macos/Podspecs'
  pod 'ZIPFoundation', :podspec => '../../macos/Podspecs/ZipFoundation.podspec'
  pod 'wBlockCoreService', :podspec => '../../macos/Podspecs'

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end

# All wBlock Safari Content Blocker Extensions for macOS
%w[
  wBlock\ Ads\ &\ Privacy
  wBlock\ Advanced
  wBlock\ Annoyances
  wBlock\ Custom
  wBlock\ Foreign\ &\ Experimental
  wBlock\ Scripts
  wBlock\ Security\ &\ Multipurpose
].each do |extension_name|
  target extension_name do
    use_frameworks!
    
    # Extensions need these specific pods
    pod 'ContentBlockerConverter', :podspec => '../../macos/Podspecs'
    pod 'wBlockCoreService', :podspec => '../../macos/Podspecs'
    pod 'Punycode', :podspec => '../../macos/Podspecs'
    pod 'FilterEngine', :podspec => '../../macos/Podspecs'
    pod 'PublicSuffixList', :podspec => '../../macos/Podspecs'
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
    
    target.build_configurations.each do |config|
      # Ensure consistent deployment target
      config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Prevent framework embedding conflicts
      if target.name.include?('ContentBlockerConverter')
        config.build_settings['SKIP_INSTALL'] = 'YES'
      end
    end
  end
  
  # Fix build setting conflicts for all project targets (including app targets)
  installer.aggregate_targets.each do |target|
    target.xcconfigs.each do |config_name, config_file|
      config_file.attributes.each do |key, value|
        if key == 'OTHER_LDFLAGS'
          # Ensure OTHER_LDFLAGS includes $(inherited) to prevent conflicts
          unless value.include?('$(inherited)')
            config_file.attributes[key] = "$(inherited) #{value}"
          end
        end
      end
    end
  end
  
  # Additional fix for generated project targets
  installer.generated_projects.each do |project|
    project.targets.each do |target|
      target.build_configurations.each do |config|
        # Ensure all targets use inherited values to prevent conflicts
        config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '14.0'
        
        # Force inheritance of CocoaPods settings to prevent override warnings
        if config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER']
          config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = '$(inherited)'
        end
        
        # Fix OTHER_LDFLAGS inheritance issues
        if config.build_settings['OTHER_LDFLAGS']
          existing_flags = config.build_settings['OTHER_LDFLAGS']
          if existing_flags.is_a?(Array)
            unless existing_flags.include?('$(inherited)')
              config.build_settings['OTHER_LDFLAGS'] = ['$(inherited)'] + existing_flags
            end
          elsif existing_flags.is_a?(String)
            unless existing_flags.include?('$(inherited)')
              config.build_settings['OTHER_LDFLAGS'] = "$(inherited) #{existing_flags}"
            end
          end
        end
      end
    end
  end
  
  # Specific fix for wBlock extension targets
  %w[
    wBlock\ Ads\ &\ Privacy
    wBlock\ Advanced
    wBlock\ Annoyances
    wBlock\ Custom
    wBlock\ Foreign\ &\ Experimental
    wBlock\ Scripts
    wBlock\ Security\ &\ Multipurpose
  ].each do |extension_name|
    extension_target = installer.pods_project.targets.find { |t| t.name.include?(extension_name.gsub('\ ', ' ')) }
    next unless extension_target
    
    extension_target.build_configurations.each do |config|
      # Ensure these targets properly inherit OTHER_LDFLAGS
      existing_flags = config.build_settings['OTHER_LDFLAGS']
      if existing_flags && !existing_flags.to_s.include?('$(inherited)')
        config.build_settings['OTHER_LDFLAGS'] = "$(inherited) #{existing_flags}"
      elsif !existing_flags
        config.build_settings['OTHER_LDFLAGS'] = '$(inherited)'
      end
    end
  end
end